#!/usr/bin/env python3
import os
import sys
import argparse
import requests
import json

whoami = os.path.basename(sys.argv[0])
whereami = os.path.dirname(os.path.realpath(__file__))


def warn(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


class Main:
    def main(self, args=sys.argv[1:], prog=whoami):
        options = self.parse_args(args, prog)
        self.github_repository = os.environ.get('GITHUB_REPOSITORY', '')
        self.github_run_id = os.environ.get('GITHUB_RUN_ID', '')
        self.github_ref = os.environ.get('GITHUB_REF', '')
        self.github_sha = os.environ.get('GITHUB_SHA', '')
        self.github_actor = os.environ.get('GITHUB_ACTOR', '')
        self.github_event_name = os.environ.get('GITHUB_EVENT_NAME', '')
        self.github_run_number = os.environ.get('GITHUB_RUN_NUMBER', '')
        self.github_workflow = os.environ.get('GITHUB_WORKFLOW', '')
        if options.start:
            self.post_start(options)
        else:
            self.token = options.token
            self.post_complete(options)

    def parse_args(self, args, prog):
        parser = argparse.ArgumentParser(
            prog=prog,
            description='post to slack',
        )
        parser.add_argument('--url',
                            help='slack URL',
                            required=True)
        parser.add_argument('--token',
                            help='github token')
        mxg = parser.add_mutually_exclusive_group(required=True)
        mxg.add_argument('--start',
                         help='report workflow start',
                         action='store_true', default=False)
        mxg.add_argument('--complete',
                         help='report workflow complete',
                         action='store_true', default=False)
        options = parser.parse_args(args)
        if options.complete and not options.token:
            sys.exit(f'{whoami}: --token is required with --complete')
        return options

    def post_start(self, options):
        message = {
            'text': (f'Build started: https://github.com/{self.github_repository}/actions/runs/{self.github_run_id}'),
            'blocks': [
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": f"""
*Starting <https://github.com/{self.github_repository}/actions/runs/{self.github_run_id}|{self.github_workflow} #{self.github_run_number}>*
• Repository: `{self.github_repository}`
• Actor: `{self.github_actor}`
• Event: `{self.github_event_name}`
• Ref: <https://github.com/{self.github_repository}/tree/{self.github_ref}|{self.github_ref}>
• Sha: <https://github.com/{self.github_repository}/commit/{self.github_sha}|{self.github_sha}>
"""
                    }
                }
            ]
        }
        r = requests.post(
            options.url,
            headers={'Content-Type': 'application/json'},
            data=json.dumps(message),
        )
        r.raise_for_status()

    def gh_get(self, url):
        r = requests.get(url,
                         headers={
                             'Accept': 'application/vnd.github.v3+json',
                             'Authorization': f'token {self.token}'
                         })
        r.raise_for_status()
        return json.loads(r.text)

    def post_complete(self, options):
        data = self.gh_get(f'https://api.github.com/repos/{self.github_repository}/actions/runs/{self.github_run_id}')
        jobs_data = self.gh_get(data['jobs_url'])

        def json_dumps(data):   # XXX
            return json.dumps(data, sort_keys=True, indent=4, separators=(',', ': '))

        print(json_dumps(jobs_data))

        lines = []
        lines.append(
            f'*Completed <https://github.com/{self.github_repository}/actions/runs/{self.github_run_id}|{self.github_workflow} #{self.github_run_number}>*')
        for j in jobs_data['jobs']:
#            if j['conclusion'] is None:
#                continue
            lines.append(f'<{j["html_url"]}|{j["name"]}> {j["started_at"]} {j["completed_at"]} {j["conclusion"]} {j["status"]}')

        lines.extend([
            f'• Repository: `{self.github_repository}`',
            f'• Actor: `{self.github_actor}`',
            f'• Event: `{self.github_event_name}`',
            f'• Ref: <https://github.com/{self.github_repository}/tree/{self.github_ref}|{self.github_ref}>',
            f'• Sha: <https://github.com/{self.github_repository}/commit/{self.github_sha}|{self.github_sha}>',
        ])



        message = {
            'text': (f'Build completed: https://github.com/{self.github_repository}/actions/runs/{self.github_run_id}'),
            'blocks': [
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "\n".join(lines),
                    }
                }
            ]
        }
        r = requests.post(
            options.url,
            headers={'Content-Type': 'application/json'},
            data=json.dumps(message),
        )
        r.raise_for_status()


if __name__ == '__main__':
    try:
        Main().main()
    except KeyboardInterrupt:
        exit(130)
